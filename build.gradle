plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
}

repositories {
    mavenCentral()
}

kotlin {
    sourceSets{
        all {
            languageSettings {
                languageVersion = '1.3'
                apiVersion = '1.3'
                enableLanguageFeature('InlineClasses')
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
            }
        }

        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
    }
    jvm('jdk8') { // for jdk 8
        compilations.main {
            kotlinOptions {
                jvmTarget = "1.8"
            }

            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }

        compilations.test {
            kotlinOptions {
                jvmTarget = "1.8"
            }

            dependencies {
                implementation kotlin('test-junit5')
                implementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
                implementation "org.apache.commons:commons-lang3:3.9"

                runtimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
            }
        }
    }
//    jvm('jdk') { // for jdk 6/7
//        compilations.main {
//            dependencies {
//                implementation kotlin('stdlib')
//            }
//        }
//
//        compilations.test {
//            dependencies {
//                implementation kotlin('test-junit')
//            }
//        }
//    }
//    js()
}

jdk8Test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'failed', 'skipped'
        showStandardStreams = true
    }
}

// execute ./gradlew wrapper then remove .gradle directory when version change
wrapper {
    gradleVersion = '5.6.2'
    distributionType = Wrapper.DistributionType.ALL
}
